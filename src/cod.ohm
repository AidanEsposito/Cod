Cod{
    Program       =  Stmt+ 
    Stmt       	=  VarDecl
                  |  TypeDecl
                  |  FuncDecl
                  |  ClassDecl
                  |  IfStmt
                  |  ForStmt
                  |  WhileStmt
                  |  ReturnStmt
                  |  BreakStmt
                  |  ContinStmt
                  |  TryStmt
                  |  PrintStmt
                
                
                
    VarDecl        = ocean? tag "=" Exp                                --variable_public
                   | lake? tag "=" Exp                               --variable_private
                   | ocean?  Type tag                                  -- type_public
                   | lake?  Type tag                                 -- type_private

    TypeDecl       = boat tag "{" VarDecl* "}"

    FuncDecl       = ocean? Type tag "(" Params ")" Block               --function_public
               	 | lake? Type tag "(" Params ")" Block              --function_private

    StructDecl     = boat tag "{" VarDecl* "}" ";"                     -- struct

    ClassDecl      = ocean? school tag ":"                               --class_public
                	 | lake? school  tag ":"                              --class_private
                
    Type        	 = Type "[" "]"                                       -- array
                        | tag                                                 -- id
                        | lost                                              -- void            
        
    Block       	 = "{" Stmt* "}"                                      --block

	 PrintStmt 	    = cast ":" Exp
    IfStmt      	 = if Exp Block else Block                           --if_else
                        | if Exp Block else IfStmt                          --nested_if
                        | if Exp Block                                      -- if     

    ForStmt        = stream tag in Exp ("..." | "..<") Exp Block           -- for_in_range
                	 | stream tag in Exp Block                                          -- for_in_collection

    WhileStmt      = tide Exp Block                                   -- while    

    ReturnStmt     = reel Exp                                        -- return

    BreakStmt      = snap                                             -- break

    ContinStmt     = flow                                        -- continue

    TryStmt        = pitch Block Catch* //possibly add finally
    Catch          = catch "(" tag* ")" Block

    Params         = "(" ListOf<Param, ","> ")"
    Param          = tag ":" Type 
    
   
    Exp         	 = Exp "||" Exp1                                     -- or
               	     | Exp1

    Exp1        	 = Exp1 "&&" Exp2                                    -- and
                	 | Exp2
                
    Exp2        	 = Exp2 relop Exp3                                   -- relational_operator                                 
                	 | Exp3
                
    Exp3        	 = Exp3 ("+" | "-") Term                             -- add_subtract
                	 | Term

    Term        	 = Term ("*" | "/" | "%") Factor                     -- multi_divide_modulo
                	 | Factor

    Factor      	 = Primary "**" Factor                                  --exponent                                 
                	 | Primary

    Primary          = "(" Exp ")"                                       -- parens
                     | "[" NonemptyListOf<Exp, ","> "]"                  -- array
                     | tag                                               --id
                     | fish                                              --num
                     | sock                                              --null                 
                     | hooked                                              --true
                     | unhooked                                             --false
                     | stringlit                                         --string

    relop 			 = "<=" | "<" | ">=" | ">" | "==" | "!=" 

    land         	 = "land" ~idchar       --let
    docked      	 = "docked" ~idchar      --const
    boat      	     = "boat" ~idchar       --struct
    function    	 = "function" ~idchar   --function   
    if         	     = "if" ~idchar         --if
    else       	     = "else" ~idchar       --else
    stream           = "stream" ~idchar     --for
    snap      	     = "snap"   ~idchar     --break
    flow             = "flow" ~idchar       --continue
    pitch            = "pitch" ~idchar      --try
    recast      	 = "recast" ~idchar     --repeat
    throw       	 = "throw" ~idchar      --throw
    reel      	     = "reel" ~idchar       --return
    tacklebox        = "tacklebox" ~idchar       --case
    catch       	 = "catch" ~idchar      --catch
    school       	 = "school" ~idchar     --class   
    ocean      	     = "ocean" ~idchar      --public
    lake             = "lake" ~idchar       --private
    lost         	 = "lost" ~idchar       --void
    in               = "in" ~idchar         --in
    tide        	 = "tide" ~idchar        --while
    cast             = "cast" ~idchar        --print
    sock 			 = "sock" ~idchar        --null
  	hooked 	     = "!"? "hooked" ~idchar     --true
  	unhooked 		 = "!"? "unhooked" ~idchar   --False
    

    keyword        = land | docked | boat | function
                   | if | else | reel | snap | flow
               	   | pitch | recast | throw | stream | tacklebox
                   | catch | school | ocean | lake | lost | in
                   | tide | cast | sock | hooked | unhooked
    
    tag  			= ~keyword "!"? letter idchar*
    idchar 			= alnum | "_"
    fish 			= "-"? "!"? digit+ ("." digit+)? (("e" | "E") ("+" | "-")? digit+)?
    
    stringlit 		= "\"" char* "\""
  	 char 			   = "\\u{" hexDigit+ "}"   									--codepoint
       				| "\\" any               									--nonbackslash
       				| ~"\"" any

    space    		+= "//" (~"\n" any)*                                      --comment
 }
